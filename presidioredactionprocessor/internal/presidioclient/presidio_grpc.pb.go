// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: presidio.proto

package presidioclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PresidioRedactionProcessor_Analyze_FullMethodName             = "/PresidioRedactionProcessor/Analyze"
	PresidioRedactionProcessor_Anonymize_FullMethodName           = "/PresidioRedactionProcessor/Anonymize"
	PresidioRedactionProcessor_AnalyzeAndAnonymize_FullMethodName = "/PresidioRedactionProcessor/AnalyzeAndAnonymize"
)

// PresidioRedactionProcessorClient is the client API for PresidioRedactionProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresidioRedactionProcessorClient interface {
	Analyze(ctx context.Context, in *PresidioAnalyzerRequest, opts ...grpc.CallOption) (*PresidioAnalyzerResponses, error)
	Anonymize(ctx context.Context, in *PresidioAnonymizerRequest, opts ...grpc.CallOption) (*PresidioAnonymizerResponse, error)
	AnalyzeAndAnonymize(ctx context.Context, in *PresidioAnalyzerAnomymizerRequest, opts ...grpc.CallOption) (*PresidioAnonymizerResponse, error)
}

type presidioRedactionProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewPresidioRedactionProcessorClient(cc grpc.ClientConnInterface) PresidioRedactionProcessorClient {
	return &presidioRedactionProcessorClient{cc}
}

func (c *presidioRedactionProcessorClient) Analyze(ctx context.Context, in *PresidioAnalyzerRequest, opts ...grpc.CallOption) (*PresidioAnalyzerResponses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresidioAnalyzerResponses)
	err := c.cc.Invoke(ctx, PresidioRedactionProcessor_Analyze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presidioRedactionProcessorClient) Anonymize(ctx context.Context, in *PresidioAnonymizerRequest, opts ...grpc.CallOption) (*PresidioAnonymizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresidioAnonymizerResponse)
	err := c.cc.Invoke(ctx, PresidioRedactionProcessor_Anonymize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presidioRedactionProcessorClient) AnalyzeAndAnonymize(ctx context.Context, in *PresidioAnalyzerAnomymizerRequest, opts ...grpc.CallOption) (*PresidioAnonymizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresidioAnonymizerResponse)
	err := c.cc.Invoke(ctx, PresidioRedactionProcessor_AnalyzeAndAnonymize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresidioRedactionProcessorServer is the server API for PresidioRedactionProcessor service.
// All implementations must embed UnimplementedPresidioRedactionProcessorServer
// for forward compatibility.
type PresidioRedactionProcessorServer interface {
	Analyze(context.Context, *PresidioAnalyzerRequest) (*PresidioAnalyzerResponses, error)
	Anonymize(context.Context, *PresidioAnonymizerRequest) (*PresidioAnonymizerResponse, error)
	AnalyzeAndAnonymize(context.Context, *PresidioAnalyzerAnomymizerRequest) (*PresidioAnonymizerResponse, error)
	mustEmbedUnimplementedPresidioRedactionProcessorServer()
}

// UnimplementedPresidioRedactionProcessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPresidioRedactionProcessorServer struct{}

func (UnimplementedPresidioRedactionProcessorServer) Analyze(context.Context, *PresidioAnalyzerRequest) (*PresidioAnalyzerResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedPresidioRedactionProcessorServer) Anonymize(context.Context, *PresidioAnonymizerRequest) (*PresidioAnonymizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Anonymize not implemented")
}
func (UnimplementedPresidioRedactionProcessorServer) AnalyzeAndAnonymize(context.Context, *PresidioAnalyzerAnomymizerRequest) (*PresidioAnonymizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeAndAnonymize not implemented")
}
func (UnimplementedPresidioRedactionProcessorServer) mustEmbedUnimplementedPresidioRedactionProcessorServer() {
}
func (UnimplementedPresidioRedactionProcessorServer) testEmbeddedByValue() {}

// UnsafePresidioRedactionProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresidioRedactionProcessorServer will
// result in compilation errors.
type UnsafePresidioRedactionProcessorServer interface {
	mustEmbedUnimplementedPresidioRedactionProcessorServer()
}

func RegisterPresidioRedactionProcessorServer(s grpc.ServiceRegistrar, srv PresidioRedactionProcessorServer) {
	// If the following call pancis, it indicates UnimplementedPresidioRedactionProcessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PresidioRedactionProcessor_ServiceDesc, srv)
}

func _PresidioRedactionProcessor_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresidioAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresidioRedactionProcessorServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresidioRedactionProcessor_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresidioRedactionProcessorServer).Analyze(ctx, req.(*PresidioAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresidioRedactionProcessor_Anonymize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresidioAnonymizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresidioRedactionProcessorServer).Anonymize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresidioRedactionProcessor_Anonymize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresidioRedactionProcessorServer).Anonymize(ctx, req.(*PresidioAnonymizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresidioRedactionProcessor_AnalyzeAndAnonymize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresidioAnalyzerAnomymizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresidioRedactionProcessorServer).AnalyzeAndAnonymize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresidioRedactionProcessor_AnalyzeAndAnonymize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresidioRedactionProcessorServer).AnalyzeAndAnonymize(ctx, req.(*PresidioAnalyzerAnomymizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PresidioRedactionProcessor_ServiceDesc is the grpc.ServiceDesc for PresidioRedactionProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresidioRedactionProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PresidioRedactionProcessor",
	HandlerType: (*PresidioRedactionProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _PresidioRedactionProcessor_Analyze_Handler,
		},
		{
			MethodName: "Anonymize",
			Handler:    _PresidioRedactionProcessor_Anonymize_Handler,
		},
		{
			MethodName: "AnalyzeAndAnonymize",
			Handler:    _PresidioRedactionProcessor_AnalyzeAndAnonymize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "presidio.proto",
}
